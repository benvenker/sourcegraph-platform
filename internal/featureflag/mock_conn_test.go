// Code generated by go-mockgen 1.2.0; DO NOT EDIT.

package featureflag

import (
	"sync"

	redis "github.com/gomodule/redigo/redis"
)

// MockConn is a mock implementation of the Conn interface (from the package
// github.com/gomodule/redigo/redis) used for unit testing.
type MockConn struct {
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *ConnCloseFunc
	// DoFunc is an instance of a mock function object controlling the
	// behavior of the method Do.
	DoFunc *ConnDoFunc
	// ErrFunc is an instance of a mock function object controlling the
	// behavior of the method Err.
	ErrFunc *ConnErrFunc
	// FlushFunc is an instance of a mock function object controlling the
	// behavior of the method Flush.
	FlushFunc *ConnFlushFunc
	// ReceiveFunc is an instance of a mock function object controlling the
	// behavior of the method Receive.
	ReceiveFunc *ConnReceiveFunc
	// SendFunc is an instance of a mock function object controlling the
	// behavior of the method Send.
	SendFunc *ConnSendFunc
}

// NewMockConn creates a new mock of the Conn interface. All methods return
// zero values for all results, unless overwritten.
func NewMockConn() *MockConn {
	return &MockConn{
		CloseFunc: &ConnCloseFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		DoFunc: &ConnDoFunc{
			defaultHook: func(string, ...interface{}) (r0 interface{}, r1 error) {
				return
			},
		},
		ErrFunc: &ConnErrFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		FlushFunc: &ConnFlushFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		ReceiveFunc: &ConnReceiveFunc{
			defaultHook: func() (r0 interface{}, r1 error) {
				return
			},
		},
		SendFunc: &ConnSendFunc{
			defaultHook: func(string, ...interface{}) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockConn creates a new mock of the Conn interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockConn() *MockConn {
	return &MockConn{
		CloseFunc: &ConnCloseFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockConn.Close")
			},
		},
		DoFunc: &ConnDoFunc{
			defaultHook: func(string, ...interface{}) (interface{}, error) {
				panic("unexpected invocation of MockConn.Do")
			},
		},
		ErrFunc: &ConnErrFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockConn.Err")
			},
		},
		FlushFunc: &ConnFlushFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockConn.Flush")
			},
		},
		ReceiveFunc: &ConnReceiveFunc{
			defaultHook: func() (interface{}, error) {
				panic("unexpected invocation of MockConn.Receive")
			},
		},
		SendFunc: &ConnSendFunc{
			defaultHook: func(string, ...interface{}) error {
				panic("unexpected invocation of MockConn.Send")
			},
		},
	}
}

// NewMockConnFrom creates a new mock of the MockConn interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockConnFrom(i redis.Conn) *MockConn {
	return &MockConn{
		CloseFunc: &ConnCloseFunc{
			defaultHook: i.Close,
		},
		DoFunc: &ConnDoFunc{
			defaultHook: i.Do,
		},
		ErrFunc: &ConnErrFunc{
			defaultHook: i.Err,
		},
		FlushFunc: &ConnFlushFunc{
			defaultHook: i.Flush,
		},
		ReceiveFunc: &ConnReceiveFunc{
			defaultHook: i.Receive,
		},
		SendFunc: &ConnSendFunc{
			defaultHook: i.Send,
		},
	}
}

// ConnCloseFunc describes the behavior when the Close method of the parent
// MockConn instance is invoked.
type ConnCloseFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []ConnCloseFuncCall
	mutex       sync.Mutex
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Close() error {
	r0 := m.CloseFunc.nextHook()()
	m.CloseFunc.appendCall(ConnCloseFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnCloseFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockConn instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ConnCloseFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConnCloseFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConnCloseFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *ConnCloseFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnCloseFunc) appendCall(r0 ConnCloseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnCloseFuncCall objects describing the
// invocations of this function.
func (f *ConnCloseFunc) History() []ConnCloseFuncCall {
	f.mutex.Lock()
	history := make([]ConnCloseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnCloseFuncCall is an object that describes an invocation of method
// Close on an instance of MockConn.
type ConnCloseFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnCloseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConnDoFunc describes the behavior when the Do method of the parent
// MockConn instance is invoked.
type ConnDoFunc struct {
	defaultHook func(string, ...interface{}) (interface{}, error)
	hooks       []func(string, ...interface{}) (interface{}, error)
	history     []ConnDoFuncCall
	mutex       sync.Mutex
}

// Do delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Do(v0 string, v1 ...interface{}) (interface{}, error) {
	r0, r1 := m.DoFunc.nextHook()(v0, v1...)
	m.DoFunc.appendCall(ConnDoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Do method of the
// parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnDoFunc) SetDefaultHook(hook func(string, ...interface{}) (interface{}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Do method of the parent MockConn instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *ConnDoFunc) PushHook(hook func(string, ...interface{}) (interface{}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConnDoFunc) SetDefaultReturn(r0 interface{}, r1 error) {
	f.SetDefaultHook(func(string, ...interface{}) (interface{}, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConnDoFunc) PushReturn(r0 interface{}, r1 error) {
	f.PushHook(func(string, ...interface{}) (interface{}, error) {
		return r0, r1
	})
}

func (f *ConnDoFunc) nextHook() func(string, ...interface{}) (interface{}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnDoFunc) appendCall(r0 ConnDoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnDoFuncCall objects describing the
// invocations of this function.
func (f *ConnDoFunc) History() []ConnDoFuncCall {
	f.mutex.Lock()
	history := make([]ConnDoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnDoFuncCall is an object that describes an invocation of method Do on
// an instance of MockConn.
type ConnDoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 interface{}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ConnDoFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnDoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ConnErrFunc describes the behavior when the Err method of the parent
// MockConn instance is invoked.
type ConnErrFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []ConnErrFuncCall
	mutex       sync.Mutex
}

// Err delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Err() error {
	r0 := m.ErrFunc.nextHook()()
	m.ErrFunc.appendCall(ConnErrFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Err method of the
// parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnErrFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Err method of the parent MockConn instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *ConnErrFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConnErrFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConnErrFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *ConnErrFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnErrFunc) appendCall(r0 ConnErrFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnErrFuncCall objects describing the
// invocations of this function.
func (f *ConnErrFunc) History() []ConnErrFuncCall {
	f.mutex.Lock()
	history := make([]ConnErrFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnErrFuncCall is an object that describes an invocation of method Err
// on an instance of MockConn.
type ConnErrFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnErrFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnErrFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConnFlushFunc describes the behavior when the Flush method of the parent
// MockConn instance is invoked.
type ConnFlushFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []ConnFlushFuncCall
	mutex       sync.Mutex
}

// Flush delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Flush() error {
	r0 := m.FlushFunc.nextHook()()
	m.FlushFunc.appendCall(ConnFlushFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Flush method of the
// parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnFlushFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Flush method of the parent MockConn instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ConnFlushFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConnFlushFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConnFlushFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *ConnFlushFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnFlushFunc) appendCall(r0 ConnFlushFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnFlushFuncCall objects describing the
// invocations of this function.
func (f *ConnFlushFunc) History() []ConnFlushFuncCall {
	f.mutex.Lock()
	history := make([]ConnFlushFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnFlushFuncCall is an object that describes an invocation of method
// Flush on an instance of MockConn.
type ConnFlushFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnFlushFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnFlushFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConnReceiveFunc describes the behavior when the Receive method of the
// parent MockConn instance is invoked.
type ConnReceiveFunc struct {
	defaultHook func() (interface{}, error)
	hooks       []func() (interface{}, error)
	history     []ConnReceiveFuncCall
	mutex       sync.Mutex
}

// Receive delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Receive() (interface{}, error) {
	r0, r1 := m.ReceiveFunc.nextHook()()
	m.ReceiveFunc.appendCall(ConnReceiveFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Receive method of
// the parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnReceiveFunc) SetDefaultHook(hook func() (interface{}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Receive method of the parent MockConn instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ConnReceiveFunc) PushHook(hook func() (interface{}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConnReceiveFunc) SetDefaultReturn(r0 interface{}, r1 error) {
	f.SetDefaultHook(func() (interface{}, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConnReceiveFunc) PushReturn(r0 interface{}, r1 error) {
	f.PushHook(func() (interface{}, error) {
		return r0, r1
	})
}

func (f *ConnReceiveFunc) nextHook() func() (interface{}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnReceiveFunc) appendCall(r0 ConnReceiveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnReceiveFuncCall objects describing the
// invocations of this function.
func (f *ConnReceiveFunc) History() []ConnReceiveFuncCall {
	f.mutex.Lock()
	history := make([]ConnReceiveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnReceiveFuncCall is an object that describes an invocation of method
// Receive on an instance of MockConn.
type ConnReceiveFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 interface{}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnReceiveFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnReceiveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ConnSendFunc describes the behavior when the Send method of the parent
// MockConn instance is invoked.
type ConnSendFunc struct {
	defaultHook func(string, ...interface{}) error
	hooks       []func(string, ...interface{}) error
	history     []ConnSendFuncCall
	mutex       sync.Mutex
}

// Send delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Send(v0 string, v1 ...interface{}) error {
	r0 := m.SendFunc.nextHook()(v0, v1...)
	m.SendFunc.appendCall(ConnSendFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Send method of the
// parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnSendFunc) SetDefaultHook(hook func(string, ...interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Send method of the parent MockConn instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *ConnSendFunc) PushHook(hook func(string, ...interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConnSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string, ...interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConnSendFunc) PushReturn(r0 error) {
	f.PushHook(func(string, ...interface{}) error {
		return r0
	})
}

func (f *ConnSendFunc) nextHook() func(string, ...interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnSendFunc) appendCall(r0 ConnSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnSendFuncCall objects describing the
// invocations of this function.
func (f *ConnSendFunc) History() []ConnSendFuncCall {
	f.mutex.Lock()
	history := make([]ConnSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnSendFuncCall is an object that describes an invocation of method Send
// on an instance of MockConn.
type ConnSendFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ConnSendFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
